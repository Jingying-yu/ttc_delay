---
title: "Choosing TTC Subway Service Provides the Most Time Stability during Weekday Rush-Hours"
subtitle: "Analysis on the Delay Magnitude of different TTC Services"
author: 
  - Sandy Yu
thanks: "Code and data are available at: https://github.com/Jingying-yu/ttc_delay.git"
date: today
date-format: long
abstract: "This paper analyzes the magnitude of TTC delays in 2023 based on service types. TTC delay data for buses, streetcars, and subways are obtained through Open Data Toronto data portal and data is used to visualize delay magnitude during different days and hours throughout the year. We find that, although TTC streetcars offered the least number of delays in 2023, riding on TTC subways provides the least average time of delay during weekday rush-hour traffic. Our results suggest that, if the time required to arrive at one's office is the same for all TTC service options, choosing subway over other services could provide the most time stability."
format: pdf
toc: true
number-sections: true
bibliography: references.bib
---

```{r}
#| include: false
#| warning: false
#| message: false
# load libraries and datasets
library(tidyverse)
library(dplyr)
library(knitr)
library(ggplot2)
library(hms)
library(patchwork)

bus_delay <- read.csv(here::here("inputs/data/cleaned_data/bus/bus_delay.csv"))
streetcar_delay <- read.csv(here::here("inputs/data/cleaned_data/streetcar/streetcar_delay.csv"))
subway_delay <- read.csv(here::here("inputs/data/cleaned_data/subway/subway_delay.csv"))
subway_delay_code <- read.csv(here::here("inputs/data/cleaned_data/subway_delay_code.csv"))

```

# Introduction

Public transportation serves as the transportation backbone for city  residents, facilitating the daily commute of millions of people. For office workers, students, and the elderly, selecting the appropriate TTC service is crucial in maintaining a reliable and efficient schedule. Despite the importance of this choice, there has been limited effort to evaluate the reliability of different TTC services to guide commuters’choices.

Publicly accessible TTC delay data can be tracked back to 2014 on the @OpenDataToronto portal, yet a comprehensive visualization of how each type of service -- bus, streetcar, and subway -— performs in terms of delay time remains narrowly explored. This paper addresses this gap by using data from the TTC delay data to analyze and visualize delay patterns across different services.

This paper specifically focuses on TTC bus, streetcar, and subway delay data from 2023, extracting and comparing them to identify which service type experienced the least amount of delay during weekday rush hours. Our findings indicate that, in 2023, the TTC subway system consistently demonstrated the shortest average delays.

Understanding these patterns is crucial for helping commuters make informed choices about which TTC service to use, especially when they have equal access to different types of stations. By providing this analysis, the paper aim to assist readers in optimizing their travel choices and enhancing their overall commuting experience.

Analyses and findings in this paper are structured into several sections: @sec-data -- Data, @sec-results -- Results, and @sec-discussion -- Discussion. The Data section introduces the context
of the datasets and examines all datasets and variables kept for analysis. The Result section focuses on visualizing and presenting the data results in Data section. The Discussion section further evaluate the implications behind the data results presented in the previous section, expands the topic beyond pure data, and touches on any weaknesses and next steps.

# Data {#sec-data}

Where the data comes from - All data used for and throughout the paper are extracted from Open Data Toronto Portal [@OpenDataToronto]. TTC Bus Delay data [@Bus], TTC Streetcar Delay [@Streetcar], TTC Subway Delay [@Subway] and TTC Subway Delay Codes [@Subway] are retrieved to compare the delay magnitudes of different services. Data is cleaned and analyzed using the open source statistical programming language R [@citeR] and supporting packages tidyverse [@tidyverse], janitor [@janitor], dplyr [@dplyr], hms [@hms], ggplot2 [@ggplot2], patchwork [@patchwork], kableExtra [@kableExtra], and knitr [@knitr].


For all delay dataset, only data in 2023 were chosen. There are three
main reasons for this choice:

>**1.** 2023 data is the most recent full-year data and offers the best reference for current (2024) delay patterns.

>**2.** COVID-19 impacted TTC operating capacity and styles in other years close to 2024.

>**3.** data from earlier years (before 2020) were structured very differently.

Therefore only 2023 delay data were chosen in this paper.


## TTC Bus Delay {#sec-data-bus}

TTC bus delay data are collected and published by the Toronto Transit Commission [@Bus], with latest update in September of 2024. A total of 7 attributes of the data are kept for further evaluation: *date of recorded delay, bus route, scheduled time of arrival, scheduled day of the week (ex. Sunday, Monday, etc.), station, cause of delay,* and *total minutes delayed*. Additional data attributes, such as *vehicle number*, were excluded from the final dataset as they are less relevant to the focus of our analysis—weekday rush-hour delay patterns.

Please see @tbl-bus for an overview of the data.

```{r}
#| label: tbl-bus
#| tbl-cap: Sample of Cleaned TTC Bus Delay Dataset
#| echo: false

sample_bus_delay <- head(bus_delay, n = 3)

knitr::kable(sample_bus_delay, col.names = c("Date", "Line", "Time", "Day", "Station", "Cause of Delay", "Min Delay"), align = c("l","c", "c", "c", "c","c", "c"))
```

## TTC Streetcar Delay {#sec-data-streetcar}

Streetcar delay data are also collected and published by the Toronto Transit Commission [@Bus]. Latest update of this dataset occurred in September of 2024. A total of 7 attributes of the data are kept for further evaluation: *date of recorded delay, streetcar line, scheduled time of arrival, scheduled day of the week* (ex. Sunday, Monday, etc.)*, station, cause of delay,* and *total minutes delayed*. Additional data attributes, such as *time gap between current and next vehicle*, were excluded from the final dataset as they are less relevant to the focus of our analysis—weekday rush-hour delay patterns.

@tbl-streetcar contains an overview of streetcar delay data.


```{r}
#| label: tbl-streetcar
#| tbl-cap: Sample of Cleaned TTC Streetcar Delay Dataset
#| echo: false

sample_streetcar_delay <- head(streetcar_delay, n = 3)

# Generate the table with automatic text wrapping for column names
knitr::kable(sample_streetcar_delay, 
             col.names = c("Date", "Line", "Time", "Day", "Station", "Cause of Delay", "Min Delay"), align = c("l","c", "c", "c", "c", "c", "c")) 
```

## TTC Subway Delay {#sec-data-subway}

Publisher of data, update cycle (last updated date)
Streetcar delay data are also collected and published by the Toronto Transit Commission [@Bus]. Latest update of this dataset occurred in September of 2024. 

@tbl-subway contains an overview of subway delay data.

### Delay Data {#sec-subway-delay}

A total of 7 attributes of the data are kept from the 2023 subway delay data file for further evaluation: *date of recorded delay, scheduled time of arrival, scheduled day of the week* (ex. Sunday, Monday, etc.)*, station, cause of delay, total minutes delayed,* and *subway line*. One potentially confusing aspect of the subway data is the *cause of delay* attribute, which is represented as codes in the dataset.

An additional dataset containing the code descriptions -- subway delay code -- was extracted and cleaned for reference. Please see @tbl-code for a sample of subway incident codes.

```{r}
#| label: tbl-subway
#| tbl-cap: Sample of Cleaned TTC Subway Delay Dataset
#| echo: false
#| message: false

sample_subway_delay <- head(subway_delay, n = 3)

knitr::kable(sample_subway_delay, col.names = c("Date", "Time", "Day", "Station", "Delay Code", "Min Delayed", "Line"), align = c("l","c", "c", "c", "c","c", "c"))
```

### Delay Code {#sec-data-code}

The table below contains a cleaned dataset used to reference TTC subway delay causes. This delay code dataset contains two key attributes: *code*, and *code description*. Delay code data is used throughout this paper as an reference for the subway delay data discussed in the @sec-subway-delay.

```{r}
#| label: tbl-code
#| tbl-cap: Sample of TTC Subway Delay Code
#| fig-pos: "H"
#| echo: false
#| message: false

sample_subway_delay_code <- head(subway_delay_code, n = 3)

knitr::kable(sample_subway_delay_code, col.names = c("Code", "Code Description"), align = c("c","c"))
```


# Results {#sec-results}

## Highest Number of Total Delayed

```{r}
#| label: fig-total-delay
#| fig-cap: Visualization to show the TTC service that has the highest number of delays in year 2023
#| fig-pos: "H"
#| echo: false
#| message: false
#construct appropriate table for visualization
service_type <- c("bus", "streetcar", "subway")
num_delay <- c(nrow(bus_delay), nrow(streetcar_delay), nrow(subway_delay))

delay_count <- data.frame(service_type, num_delay)

# Generate the bar plot
ggplot(delay_count, aes(x = service_type, y = num_delay, fill = service_type)) +
  geom_bar(stat = "identity") + 
  geom_text(aes(label = paste0(num_delay, " delayed")), 
          vjust = 1, color = "white", size = 3.5, position = position_stack(vjust = 0.55)) +
  labs(title = "Number of Delays by Service Type", x = "Service Type", y = "Number of Delays", fill = "Service Type") +  # Label the axes
  theme_minimal()  # Apply a minimal theme
```

## Most Delayed during Weekday

Define Rush Hours: Rush Hours: 
• Morning Rush-Hour: Approximately 7:00 AM to 9:00 AM 
• Evening Rush-Hour: Approximately 4:00 PM to 7:00 PM

Present Results During Rush Hours & at Off-Peak Hours

```{r}
#| echo: false
#| message: false
# Setup
weekday_bus_delay <- read.csv(here::here("inputs/data/cleaned_data/bus/bus_delay.csv"))
weekday_streetcar_delay <- read.csv(here::here("inputs/data/cleaned_data/streetcar/streetcar_delay.csv"))
weekday_subway_delay <- read.csv(here::here("inputs/data/cleaned_data/subway/subway_delay.csv"))
```

```{r}
#| label: fig-weekday
#| fig-cap: Visualization to show the total delayed time during weekdays in 2023
#| fig-pos: "H"
#| echo: false
#| message: false

service_type <- c("bus", "streetcar", "subway")
sum_delay_time <- c(sum(weekday_bus_delay$min_delay), sum(weekday_streetcar_delay$min_delay), sum(weekday_subway_delay$min_delay))
mean_delay_time <- c(mean(weekday_bus_delay$min_delay), mean(weekday_streetcar_delay$min_delay), mean(weekday_subway_delay$min_delay))


total_delay_time <- data.frame(service_type, as.numeric(sum_delay_time))
avg_delay_time <- data.frame(service_type, as.numeric(mean_delay_time))

# Generate the bar plot
sum_graph <- ggplot(total_delay_time, aes(x = service_type, y = sum_delay_time/60, fill = service_type)) +
  geom_bar(stat = "identity") + 
  # Add labels for total hours
  geom_text(aes(label = paste0(round(sum_delay_time / 60, 2), "hrs")), 
            vjust = 1, color = "black", size = 1.6, lineheight = 0.8, position = position_stack(vjust = 0.6)) +  
  labs(title = "Total Weekday Delay (hrs)", 
       x = "Service Type", y = "Total Delayed (hrs)", fill = "Service Type") +  # Label the axes
  theme_minimal() +
  theme(legend.position = "none", axis.text.x = element_text(size = 8), 
        plot.title = element_text(size = 11))

avg_graph <- ggplot(avg_delay_time, aes(x = service_type, y = mean_delay_time, fill = service_type)) +
  geom_bar(stat = "identity") + 
  # Add labels for total hours
  geom_text(aes(label = paste0(round(mean_delay_time, 1), "mins")), 
            vjust = 1, color = "black", size = 2, position = position_stack(vjust = 0.6)) +  
  labs(title = "Average Weekday Delay (min)", 
       x = "Service Type", y = "Average Delay Time (min)", fill = "Service Type") +  # Label the axes
  theme_minimal() +
  theme(axis.text.x = element_text(size = 8), 
        plot.title = element_text(size = 11))

sum_graph + avg_graph
```

## Most Delayed during Rush-Hours

```{r}
#| echo: false
#| message: false
# Setup
bus_delay_rush <- read.csv(here::here("inputs/data/cleaned_data/bus/bus_delay_rush.csv"))
streetcar_delay_rush <- read.csv(here::here("inputs/data/cleaned_data/streetcar/streetcar_delay_rush.csv"))
subway_delay_rush <- read.csv(here::here("inputs/data/cleaned_data/subway/subway_delay_rush.csv"))
```

```{r}
#| label: fig-rush
#| fig-cap: Barplot used to visualize the longest average delay time for different TTC services during Rush-Hours and Off-Peak Hours
#| fig-pos: "H"
#| echo: false
#| message: false

service_type <- c("bus", "streetcar", "subway")

morning_bus_rush <- bus_delay_rush |> filter(rush_type == "morning")
morning_streetcar_rush <- streetcar_delay_rush |> filter(rush_type == "morning")
morning_subway_rush <- subway_delay_rush |> filter(rush_type == "morning")
morning_mean_delay_rush <- c(mean(morning_bus_rush$min_delay), mean(morning_streetcar_rush$min_delay), mean(morning_subway_rush$min_delay))

#build morning rush dataset
morning_avg_delay_rush <- data.frame(service_type, as.numeric(morning_mean_delay_rush))

evening_bus_rush <- bus_delay_rush |> filter(rush_type == "evening")
evening_streetcar_rush <- streetcar_delay_rush |> filter(rush_type == "evening")
evening_subway_rush <- subway_delay_rush |> filter(rush_type == "evening")
evening_mean_delay_rush <- c(mean(evening_bus_rush$min_delay), mean(evening_streetcar_rush$min_delay), mean(evening_subway_rush$min_delay))

#build evening rush dataset
evening_avg_delay_rush <- data.frame(service_type, as.numeric(evening_mean_delay_rush))

morning_rush <- ggplot(morning_avg_delay_rush, aes(x = service_type, y = morning_mean_delay_rush, fill = service_type)) + geom_bar(stat = "identity") + 
  # Add labels for total hours
  geom_text(aes(label = paste0(round(mean_delay_time, 1), " mins")), 
            vjust = 1, color = "white", size = 2, position = position_stack(vjust = 0.6)) +  
  labs(title = "AM-Rush Average Delay", 
       x = "Service Type", y = "Average Delay Time (min)", fill = "Service Type") +  # Label the axes
  theme_minimal() +
  theme(legend.position = "none", axis.text.x = element_text(size = 8))

evening_rush <- ggplot(evening_avg_delay_rush, aes(x = service_type, y = evening_mean_delay_rush, fill = service_type)) + geom_bar(stat = "identity") + 
  # Add labels for total hours
  geom_text(aes(label = paste0(round(mean_delay_time, 1), " mins")), 
            vjust = 1, color = "white", size = 2, position = position_stack(vjust = 0.6)) +  
  labs(title = "PM-Rush Average Delay", 
       x = "Service Type", y = "Average Delay Time (min)", fill = "Service Type") +  # Label the axes
  theme_minimal() +
  theme(axis.text.x = element_text(size = 8))

morning_rush + evening_rush
```

## Most Popular Delay Reasons

-   1 table for all three services
-   separate into rush & off-peak hours

```{r}
#| label: tbl-reason
#| tbl-cap: Top 5 Most Popular Reason for Delay
#| table.position: "H"
#| echo: false
#| message: false

# Extract the top 5 most frequent 'incident' values for each dataset
top_bus_incidents <- head(sort(table(bus_delay$incident), decreasing = TRUE), 5)
top_streetcar_incidents <- head(sort(table(streetcar_delay$incident), decreasing = TRUE), 5)
top_subway_incidents <- head(sort(table(subway_delay$code), decreasing = TRUE), 5)
top_subway_codes <- names(top_subway_incidents)

reason_delay <- data.frame(
  names(top_bus_incidents), names(top_streetcar_incidents), top_subway_codes)

# Create a new dataset 'reason_delay'
reason_delay$top_subway_codes <- subway_delay_code$code_description[
  match(reason_delay$top_subway_codes, subway_delay_code$code)
]

reason_delay <- reason_delay |> rename(bus = names.top_bus_incidents., streetcar = names.top_streetcar_incidents., subway = top_subway_codes)

knitr::kable(reason_delay, col.names = c("Bus", "Streetcar", "Subway"), align = c("c", "c", "c")) |>
  kableExtra::kable_styling(position = "center", font_size = 10)
```

## Most Popular Delayed Lines

-   1 table for all three services
-   separate into rush & off-peak hours

```{r}
#| label: tbl-lines
#| tbl-cap: Most delayed Lines for each TTC Service
#| table.position: "H"
#| echo: false
#| message: false

service_type <- c("bus", "streetcar", "subway")
most_delay_line <- c(bus_delay$route[which.max(bus_delay$min_delay)], streetcar_delay$line[which.max(streetcar_delay$min_delay)], subway_delay$line[which.max(subway_delay$min_delay)])

# create dataframe
most_delay_data <- data.frame(service_type, most_delay_line)
# rename SRT to proper TTC Line name
most_delay_data$most_delay_line[most_delay_data$most_delay_line == "SRT"] <- "Line 3"

#modify table aesthetics
most_delay_transposed <- t(most_delay_data$most_delay_line)
colnames(most_delay_transposed) <- most_delay_data$service_type

# Display the transposed data using knitr::kable()
knitr::kable(most_delay_transposed, col.names = colnames(most_delay_transposed), align = "c")
```

# Discussion {#sec-discussion}

## TTC Service Prices {#sec-price}
-   one-fare

## Importance of TTC Services
- capacity of TTC daily TTC service capacities
- rush-hour traffic

## TTC Service Amenities

- The PATH (for financial district)
- AC in Summer & Winter

## Errors in analysis, Limitations and Next Steps
- only included 2023 data, should include more years for fairer inspection
- unable to distinguish between on-time rate for different district
- next step: explore GO services (GO trains)

# Conclusion {#sec-conclusion}

\newpage

# References
